#+TITLE: Julia

* Random tricks

- =collect(Set(1,2))= returns Array

** Install library behind proxy

#+begin_example
export HTTP_PROXY=127.0.0.1:8888
export HTTPS_PROXY=127.0.0.1:8888
julia
#+end_example

* Julia Lang
** Macros
Julia macros are hygienic:

#+begin_quote
First, variables within a macro result are classified as either local or
global. A variable is considered local if it is assigned to (and not declared
global), declared local, or used as a function argument name. Otherwise, it is
considered global.

Local variables are then renamed to be unique (using the gensym function, which
generates new symbols), and global variables are resolved within the macro
definition environment.
#+end_quote

And you can escape the hygienic by =esc=, e.g.

#+BEGIN_SRC julia
macro zerox()
    return esc(:(x = 0))
end
#+END_SRC

A common pattern:

#+BEGIN_SRC julia
for op = (:sin, :cos, :tan, :log, :exp)
    eval(:(Base.$op(a::MyNumber) = MyNumber($op(a.x))))
end
#+END_SRC


* Standard library

** string
interpolation:
#+BEGIN_SRC julia
var = 5
"$var-$(now())"
#+END_SRC

concatenation:
#+BEGIN_SRC julia
"hello" * "world"
#+END_SRC

#+BEGIN_SRC julia
findfirst(isequal('c'), "abcdc")
findnext(isequal('c'), "abcdc", 3)
occursin("world", "hello world")
startswith(s, prefix)
endswith(s, suffix)
strip(s)
#+END_SRC

regular expression:

#+BEGIN_SRC julia
occursin(r"^\s*(?:#|$)", "# a comment")
m = match(r"(a|b)(c)?(d)", "acd")
m.match
m.captures
m.offset
m.offsets

replace("a", r"." => s"\g<0>1")
# => "a1"
#+END_SRC

parse:

#+BEGIN_SRC julia
parse("123", Int)
#+END_SRC

** I/O
IO descriptors
- Base.stdout
- Base.stderr
- Base.stdin

Open file:

#+BEGIN_SRC julia
open("myfile.txt", "w") do io
    write(io, "Hello world!")
end
#+END_SRC

Read and write:
- write(io, x)
- flush(io)
- read(io, String): read all content
- read(io, Char): read a char
- readline(io)
- readlines(io)
  - eachline(io): similar to readlines, but this is iterable
- readuntil(io, delim)

seek and position:
- position(io): return the current position
- seek(io, pos): seek to pos

To test IO functions, use =io=IOBuffer("hello world")=

** FS
In =Base.Filesystem=

walking dir:

#+BEGIN_SRC julia
readdir("/path/to/dir")
# => array of filenames and dirnames

for (root, dirs, files) in walkdir(".")
    println("Directories in $root")
    for dir in dirs
        println(joinpath(root, dir)) # path to directories
    end
    println("Files in $root")
    for file in files
        println(joinpath(root, file)) # path to files
    end
end

isdir(path)
isfile(path)
#+END_SRC

Modifying:
#+BEGIN_SRC julia
mkdir("/path/to/dir")
mkpath("/this/is/mkdir/-p/")
cp(src, dst)
mv(src, dst)
rm(path)
touch(path)
chmod()
chown()
#+END_SRC

Tempdir
#+BEGIN_SRC julia
mktemp()
# => (path, io), this is temp file

mktempdir()
# => path
#+END_SRC

pathname:
#+BEGIN_SRC julia
dirname(path)
basename(path)
joinpath(parts...)
splitpath(path)
# remove . and ..
normpath(path)
expanduser(path)
#+END_SRC

** random numbers

basic:
#+BEGIN_SRC julia
rand()
# N(0,1)
randn()
randstring('a':'z', len=8)
randperm()
shuffle()
seed!(1234)
#+END_SRC

use a custom generator:
#+BEGIN_SRC julia
using Distributions
dist = MvNormal(11, 1)
rand(dist, 100)
#+END_SRC





** network
#+BEGIN_SRC julia
download(url, localfile)
#+END_SRC







** Useful functions
- =sortperm(v)=: Return a permutation vector I that puts v[I] in sorted order.
- =findfirst(predicate::Function, A)=: Return the index or key of the first
  element of A for which predicate returns true.
- =mapreduce(f, op, itrs...; [init])=: Apply function f to each element(s) in
  itrs, and then reduce the result using the binary function op

intuitive ones:
- reverse
- abs
- median

* Tools

** profiling
- manual: https://docs.julialang.org/en/v1/manual/profile/
- graphical viewer: [[https://github.com/timholy/ProfileView.jl][timholy/ProfileView.jl]]

#+BEGIN_SRC julia
Profile.init(n = 10^7, delay = 0.01)
Profile.clear()

@profile foo()

Profile.print()
#+END_SRC

** Using Pkg

#+BEGIN_SRC julia
using Pkg
Pkg.add(PackageSpec(url="https://github.com/lihebi/julia-repl", rev="master"))
#+END_SRC

To develop a project:

#+BEGIN_SRC julia
Pkg.develop(PackageSpec(url="https://github.com/lihebi/julia-repl"))
#+END_SRC

Then view the current pkg status:

#+BEGIN_SRC julia
Pkg.status()
#+END_SRC

You will see:

#+BEGIN_SRC julia
EmacsREPL v0.1.0 [`~/.julia/dev/EmacsREPL`]
#+END_SRC


* Third-party Libraries

** Tmp
- [[https://github.com/timholy/Revise.jl][timholy/Revise.jl]]
- [[https://github.com/JuliaMath/Interpolations.jl][JuliaMath/Interpolations.jl]]
- [[https://github.com/JuliaMath/Calculus.jl][JuliaMath/Calculus.jl]]

** web & servers
- [[https://github.com/JuliaWeb/JuliaWebAPI.jl][JuliaWeb/JuliaWebAPI.jl]]: this is interesting, it wraps a julia function as a
  remote callable API.
- [[https://github.com/GenieFramework/Genie.jl][GenieFramework/Genie.jl]]: this is a MVC framework, for building web apps with
  sophiscated routing. It should work but probably too complex for my purpose.
- [[https://github.com/JuliaWeb/HTTP.jl][JuliaWeb/HTTP.jl]]: seems to be more mature.

** Static compilation
[[https://github.com/JuliaLang/PackageCompiler.jl][JuliaLang/PackageCompiler.jl]]: it has two modes:
- build a sysimage, still requires juila to run, but is faster to start. When
  running it seems to be a regular julia session.
- app. This can be run without julia.

I'm interested in the sysimage one. Specifically, you can do this:

#+BEGIN_SRC julia
create_sysimage([:CuArrays, :Zygote,
                 :Distributions,
                 :LightGraphs, :MetaGraphs,
                 :CSV, :Plots, :DataFrames, :HDF5,
                 :TensorOperations],
                sysimage_path="myimage.so",
                replace_default=true)
#+END_SRC


And start =julia= like this:

#+begin_example
julia --sysimage myimage.so
#+end_example

The =replace_default= argument, if set to =true=, will replace julia's default
image, thus you don't need to specify the sysimage anymore. To restore to
default, use

#+BEGIN_SRC julia
restore_default_sysimage()
#+END_SRC




It seems also possible to precompile only some functions.

** reference
- juliastats: https://juliastats.org/

- [[https://github.com/kmsquire/Match.jl][kmsquire/Match.jl]]
- [[https://github.com/JuliaStats/RDatasets.jl][JuliaStats/RDatasets.jl]]: Interface to the [[https://github.com/vincentarelbundock/Rdatasets][vincentarelbundock/Rdatasets]]

** ML library
- [[https://github.com/mpastell/LIBSVM.jl][mpastell/LIBSVM.jl]]: Interface to [[https://www.csie.ntu.edu.tw/~cjlin/libsvm/][libsvm]]

- [[https://github.com/willtebbutt/Stheno.jl][willtebbutt/Stheno.jl]]: Gaussian Process
- [[https://github.com/STOR-i/GaussianProcesses.jl][STOR-i/GaussianProcesses.jl]]: Gaussian Process
- [[https://github.com/alan-turing-institute/MLJ.jl][alan-turing-institute/MLJ.jl]]
*** TODO [[https://github.com/cstjean/ScikitLearn.jl][cstjean/ScikitLearn.jl]]

** Data Representation
- [[https://github.com/JuliaMath/FixedPointNumbers.jl][JuliaMath/FixedPointNumbers.jl]]

** Optimizers
- [[https://github.com/JuliaNLSolvers/Optim.jl][Optim.jl]]: optimization
- [[https://github.com/JuliaOpt/JuMP.jl][JuMP.jl]]: another optimizer with more solvers
- [[https://github.com/JuliaMath/IterativeSolvers.jl][JuliaMath/IterativeSolvers.jl]]: CG method for solving linear equations

** GPU computing

- CuArrays.jl: https://github.com/JuliaGPU/CuArrays.jl
- CUDAapi.jl: https://github.com/JuliaGPU/CUDAapi.jl
- CUDAdrv.jl: https://github.com/JuliaGPU/CUDAdrv.jl
- CUDAnative.jl: https://github.com/JuliaGPU/CUDAnative.jl

** Plots
- [[https://github.com/JuliaPlots/Plots.jl][JuliaPlots/Plots.jl]]
- [[https://github.com/JuliaPlots/StatsPlots.jl][JuliaPlots/StatsPlots.jl]]
- [[https://github.com/JuliaPlots/RecipesBase.jl][JuliaPlots/RecipesBase.jl]]

** Datasets
- [[https://github.com/JuliaLang/METADATA.jl][METADATA.jl]]: Used for [[https://pkg.julialang.org/docs/][official package registry]]
- [[https://github.com/FluxML/Metalhead.jl][Metalhead.jl]]: Some vision models and dataset
- [[https://github.com/JuliaIO/HDF5.jl][JuliaIO/HDF5.jl]]

*** [[https://github.com/JuliaData/DataFrames.jl][DataFrames.jl]]
This is actually pretty easy to use.

Construction:
#+BEGIN_SRC julia
df = DataFrame(A = 1:4, B = ["M", "F", "F", "M"])
#+END_SRC

Colum-by-column construction:
#+BEGIN_SRC julia
df = DataFrame()
df.A = 1:8
df.B = ["M", "F", "F", "M", "F", "M", "M", "F"]
#+END_SRC

Row-by-row construction:
#+BEGIN_SRC julia
df = DataFrame(A = Int[], B = String[])
push!(df, (1, "M"))
push!(df, [2, "N"])
push!(df, Dict(:B => "F", :A => 3))
#+END_SRC

Data can be accessed using dot-notation. e.g. =df.A=. You can also pass selector
expressions to filter data out.

#+BEGIN_SRC julia
df[df.A .> 1, :]
#+END_SRC

sorting:
#+BEGIN_SRC julia
sort(df, [:A, :B])
#+END_SRC





*** [[https://github.com/JuliaData/CSV.jl][CSV.jl]]
Reading

=CSV.read()= reads a file into data frames. The columns can be accessed using
=$= syntax.

#+BEGIN_SRC julia
df = CSV.read(fname)
df$a
df$b
#+END_SRC

=CSV.Rows()= returns, well, =CSV.Rows=, you can access the column by =dot= notation.

#+BEGIN_SRC julia
for row in CSV.Rows(fname)
    @show row.a row.b
end
#+END_SRC

Writing. =CSV.write(fname, table)=. The interface seems to be [[https://github.com/JuliaData/Tables.jl][Tables.jl]]. It
could be just =DataFrame=.


** Images
- [[https://github.com/JuliaGraphics/ColorTypes.jl][ColorTypes.jl]]
- [[https://github.com/JuliaImages/ImageFiltering.jl][ImageFiltering.jl]]
- [[https://github.com/JuliaImages/Images.jl][Images.jl]]

colorview, channelview, RGB
** Graph
*** [[https://github.com/JuliaGraphs/LightGraphs.jl][LightGraphs.jl]]
A great package for
- just the graph
- generate different random graphs
- traversal
- plotting
- algorithms:
  - shortest path
  - minimum spanning tree
- distance metrics
*** [[https://github.com/JuliaGraphs/MetaGraphs.jl][MetaGraphs.jl]]
LightGraphs with arbitrary data on nodes.

*** [[https://github.com/GiovineItalia/Compose.jl][Compose.jl]]

The racket/pict for Julia.

*** [[https://github.com/IainNZ/GraphLayout.jl][GraphLayout.jl]]
Alternatives:
- [[https://github.com/Keno/GraphViz.jl][GraphViz.jl]]
- [[https://github.com/sisl/TikzGraphs.jl][TikzGraphs.jl]]


** Language & Compiler tools
- [[https://github.com/MikeInnes/MacroTools.jl][MacroTools.jl]]
- [[https://github.com/kmsquire/Match.jl][kmsquire/Match.jl]]
- [[https://github.com/SciML/RecursiveArrayTools.jl][SciML/RecursiveArrayTools.jl]]: this is to solve array of array
  problem. Specifically, the splitting syntax in =cat= can cause stack overflow
  if the array is to large. Some discussions:
  - [[https://stackoverflow.com/questions/47021821/julia-flattening-array-of-array-tuples][stack overflow link]]
  - [[https://stackoverflow.com/questions/37476815/julia-converting-vector-of-arrays-to-array-for-arbitrary-dimensions/37488453#37488453][stack overflow link]]
  - [[https://stackoverflow.com/questions/28539382/julia-is-slow-with-cat-command][stack overflow link]]
  - [[https://github.com/JuliaLang/julia/issues/21672][github issue]]
  - or iterator.flatten may work
    - =collect(Iterators.flatten([[1, 2, 3], [4, 5, 6]]))=


** Probablistic packages
- [[https://github.com/JuliaStats/Distributions.jl][Distributions.jl]]
- [[https://github.com/JuliaStats/GLM.jl][GLM.jl]] (!!!)

