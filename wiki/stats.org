#+TITLE: Statistic Computing
#+PROPERTY: header-args:R :results output

* R lang
** References
- [[https://cran.r-project.org/doc/manuals/r-release/R-intro.html][official introduction tutorial]]
- [[https://cran.r-project.org/doc/manuals/r-release/R-lang.html][the language reference]]

** Setting up

*** Packages
- =library()= see the list of installed packages.
- =library(class)= load the package =class=.
- =search()= see the list of loaded packages.
- =install.packages()= and =update.packages()= install and update packages.

*** Emacs ESS
To start ESS session, run command =S=.
ESS will create a command interface as a buffer.
Execute =?foo= will open the =R-doc= for the function =foo=.

There's a babel in org mode for R, so just =C-c C-c= would work.
This will prompt to create a session.
One special for this babel is you can evaluate by line, using =C-<RET>= in the edit buffer.

Keep the session using the header:
#+BEGIN_EXAMPLE
#+PROPERTY: session *R*
#+END_EXAMPLE

To export a graph:

#+BEGIN_EXAMPLE
:file image.png :results output graphics :exports both
#+END_EXAMPLE

To export ordinary result:

#+BEGIN_EXAMPLE
:exports both
#+END_EXAMPLE

To export some summary data:

#+BEGIN_EXAMPLE
:exports both :results output org
#+END_EXAMPLE

*** Interactive command
We need to know what's going on in the current workspace.  =getwd()=
and =setwd()= get and set the current dir.  =ls()= list the objects
currently stored.  =rm(x, y, z)= remove objects =rm(list=ls())= remove
all objects. =objects()= create and store current objects.

We can perform some IO by =save.image("mydata.Rdata")= and
=load("mydata.Rdata")= will save and load workspace in current
directory respectively.  =source("a.R")= loads a script.
=sink("a.lis")= redirects the output to a file, and =sink()= restore
that to standard output.

You can view documentation by calling help =help(lm)=. =?lm= and
=??solve= also shows documentation, while =example(topic)=, as its
name indicates, shows the examples.  =help.start()= opens the html
documentation page.

Finally, =q()= quit R.

The =print= function can output the value of a variable.

To enter the debugger, a call to =browser= function suffices.  This allows you
to browse the values at that point.  A more powerful debugger is by a call to
=debug= with the function name as argument.  Each time that function is called,
you enter the debug and can control the execution.  Tracing can be registered by
=trace= or =untrace= with the name of the function.  It might need to be quoted
in some case, so you'd better quote it, with double quotes.  Every time the
function is invoked, the return value will be printed as trace.

*** Commonly used functions
- =str= show the structure of arbitrary type
- =summary= print the summary
To see the data, you can use:
- dim()
- length()
- head()
- tail()
- =summary(dataset)= shows some information like max,min,mean
- =class(data$col)= get type
- =levels(data$col)= if it is factor, get the values

** Scope

The scope is pretty weired, it is lexical scoping, but assign to the variable
has no effect. You have to use =<<-= to assign.


#+BEGIN_SRC R
f <- function() {
  var <- 0
  list(
    print = function() {
      print(var)
    },
    add1 = function() {
      var <- var + 1
    },
    sub1 = function() {
      var <<- var - 1
    })}
l <- f()
l$print()
l$add1()
l$print()
l$sub1()
l$print()
#+END_SRC

#+RESULTS:
: [1] 0
: [1] 0
: [1] -1

The function parameter is always local, changing it have no effect outside:

#+BEGIN_SRC R
f <- function (var) {
  var[1] <- 8
}
x <- c(1,2,3)
f(x)
x
#+END_SRC

#+RESULTS:
: [1] 1 2 3

It is call by value, for all objects. You can NOT even change a global variable,
even using =<<-=:

#+BEGIN_SRC R
x <- 1
f <- function() {
  x <<- 2
}
x
#+END_SRC

#+RESULTS:
: [1] 1




** Types

*** primitives

Looks like all numbers are double by default:

#+BEGIN_SRC R
typeof(1)
typeof(1L)
#+END_SRC

#+RESULTS:
: [1] "double"
: [1] "integer"

*** Vector
Create a vector by =c()=, which is append:

#+BEGIN_SRC R
c(1,2,3)
x <- c(1,2,3)
c(x, 0, x)
#+END_SRC

#+RESULTS:
: [1] 1 2 3
: [1] 1 2 3 0 1 2 3

Vectors are the array of objects of the same mode (type).

#+BEGIN_SRC R
c(1, "hello")
#+END_SRC

#+RESULTS:
: [1] "1"     "hello"



To create a sequence:
#+BEGIN_SRC R
1:10
10:1
#+END_SRC

#+RESULTS:
:  [1]  1  2  3  4  5  6  7  8  9 10
:  [1] 10  9  8  7  6  5  4  3  2  1


Colon operator has higher priority:

#+BEGIN_SRC R :results output
2*1:10
#+END_SRC

#+RESULTS:
:  [1]  2  4  6  8 10 12 14 16 18 20

The more powerful sequence function is =seq=:

#+BEGIN_SRC R :results output
seq(1,10)
seq(-1, 1, by=.2)
seq(length=10, from=-5, by=.2)
#+END_SRC

#+RESULTS:
:  [1]  1  2  3  4  5  6  7  8  9 10
:  [1] -1.0 -0.8 -0.6 -0.4 -0.2  0.0  0.2  0.4  0.6  0.8  1.0
:  [1] -5.0 -4.8 -4.6 -4.4 -4.2 -4.0 -3.8 -3.6 -3.4 -3.2

Repeating something:

#+BEGIN_SRC R
x <- c(1,2,3)
rep(x, times=3)
rep(x, each=3)
#+END_SRC

#+RESULTS:
: [1] 1 2 3 1 2 3 1 2 3
: [1] 1 1 1 2 2 2 3 3 3


The length, mode, typeof
#+BEGIN_SRC R
x <- c(1,2,3)
length(x)
mode(x)
typeof(x)
#+END_SRC

#+RESULTS:
: [1] 3
: [1] "numeric"
: [1] "double"


*** Indexing

Vectors can be indexed by integers, starting from 1.

#+BEGIN_SRC R
x <- c(1,2,3,4)
x[2]
#+END_SRC

#+RESULTS:
: [1] 2

It can also be indexed by vector of integers

#+BEGIN_SRC R
x <- c(1,2,3,4)
x[c(1,3)]
#+END_SRC

#+RESULTS:
: [1] 1 3

Negative index selects the elements other than those index. The index 0 will
return empty (HEBI: ??).

#+BEGIN_SRC R
x <- c(1,2,3,4)
x[0]
x[-1]
x[c(-1, -3)]
#+END_SRC

#+RESULTS:
: numeric(0)
: [1] 2 3 4
: [1] 2 4

Indexing by logical vector

#+BEGIN_SRC R
x <- c(1,2,3,4)
x[c(TRUE, FALSE, TRUE, FALSE)]
#+END_SRC

#+RESULTS:
: [1] 1 3

Or by its name, where the string is compared *partially* (HEBI: ??)

#+BEGIN_SRC R
x <- c(1,2,3)
names(x) <- c("hello", "world", "lala")
x
x["hel"]
x["hello"]
x[c("hello", "world")]
#+END_SRC

#+RESULTS:
: hello world  lala
:     1     2     3
: <NA>
:   NA
: hello
:     1
: hello world
:     1     2



Matrix can be created by the =matrix= function.

#+BEGIN_SRC R
x <- matrix(1:8, nrow=2)
x
dim(x)
#+END_SRC

#+RESULTS:
:      [,1] [,2] [,3] [,4]
: [1,]    1    3    5    7
: [2,]    2    4    6    8
: [1] 2 4

*** list
list is a misnomer, it is a dict

#+BEGIN_SRC R
l <- list(hello=1, "world"=2)
l
l$hello
l$world
#+END_SRC

#+RESULTS:
: $hello
: [1] 1
:
: $world
: [1] 2
:
: [1] 1
: [1] 2



*** Data frame
- =na.omit= :: can omit the NA values in data frame

A data frame is a list of equal-length vectors.
When getting the data from read.csv, the result is a data frame.
Use =names= to work on data frames will emit the names.
- Since it is a list, using =[]= to index will give also the list, a.k.a. data frame, retaining names.
  You can use a vector as index.
- Using =[[]]= to index will give the value, dropping names.
  You cannot use a vector as index.

*** type conversion
you can change a type of a vector by
- =as.factor(x)=
- as.numeric()



*** TODO data loading

- =read.csv=
- =write=
- =write.table=
- =write.csv=
- ~read.table("filename", header=TRUE, sep=",")~
  - this ignores blank lines,
  - and expect the header to be one field less than the body.
  - =#= as comments
- read.delim
- =cat= outputs the data, no index, no newline


- =attach(data)=: make the columns into this namespace
- =detach(data)=: remove those



*** TODO missing value
The missing values are =NA=, tested by =is.na=.  Illegal computations produces
=NaN=, e.g. =0/0=.

*** TODO set
subset

*** TODO string
substr


*** Evaluation rules (broadcast)
- recycling rules: the shortest list is recycled to the length of longest.
- dimensional attributes: the dimension of matrix must match. No recycle for a matrix.

** Operators
- arithmetic: =+-*/=, =^= for exp, =%%= for modulus
- matrix: =%*%= matrix product, =%o%= outer product
- logic: =!=, =&, |= for vector, =&&, ||= for no vector
- relative: ~>, <, ==, <=, >=~
- general: =<-, ->= assignments, =$= list subset, =:= sequence, =~= for model formula

Built-in functions:
- =log=, =exp=, =sin=, =cos=, =tan=, =sqrt=
- =min=, =max=
- =range=: same as =c(min(x),max(x))=
- =length(x)=, =sum(x)=, =prod(x)= (product)
- =mean(x)=: =sum(x)/length(x)=
- ~var(x)~: ~sum((x-mean(x))^2)/(length(x)-1)~
- ~sort(x)~: increasing order
- ~order()~ or ~sort.list()~
- =paste(sep=" ")= function takes an arbitrary number of arguments and
  concatenates them one by one into character strings. The argument can be
  numeric.
- =toString(8)=: convert integer to string
- =round(x, digits=0)=

** Control Structure
The compound statements are the same as C, can be a single statement without the braces.

*** Conditional
- if: =if (STMT) STMT else if (STMT) STMT else STMT=

The switch is quite interesting. It is

#+BEGIN_SRC R
switch(x, list...)
#+END_SRC

The semantic is to find x in the list and return the value. If x is not in list,
return NULL.

An unnamed list has implicit index as name:

#+BEGIN_SRC R
switch(2,1,2,3)
#+END_SRC

#+RESULTS:
: [1] 2

Using name:

#+BEGIN_SRC R
switch("hello", hello=1, world=2)
#+END_SRC

#+RESULTS:
: [1] 1

not found, return NULL:

#+BEGIN_SRC R
is.null(switch("nothing", hello=1))
#+END_SRC

#+RESULTS:
: [1] TRUE

Interestingly, even for named list, we can still use the index:

#+BEGIN_SRC R
switch(2, hello=1, world=2)
#+END_SRC

#+RESULTS:
: [1] 2


*** Loop
- for loop: =for (NAME in VECTOR) STMT=
- while loop: =while (STMT) STMT=
- repeat: =repeat STMT=
- =break=, =next=


#+BEGIN_SRC R
ret <- c()
for (i in 1:5) {
  ret <- c(ret, i)
}
ret
#+END_SRC

#+RESULTS:
: [1] 1 2 3 4 5


** Function
=function (ARGLIST) BODY=

The argument list can be a symbol, a ~symbol=value~, or a =...=.
The body is a compound expression, surrounded with ={}=.
Function can be assigned to a symbol.

The matching of formals and actual are pretty tricky.
1. exact matching on tags
2. partial matching on tags
3. positional matching for =...= Partial matching result must be unique, but the
   exact matched ones are excluded before this step is entered.

#+BEGIN_SRC R
f <- function(a, b, c) {
  return(c(a, b+c))
}
f(1,2,3)
#+END_SRC

#+RESULTS:
: [1] 1 5


** Quote (!!)
The quote will wrap the expression into an object without evaluating it.  The
resulting object has the mode of =call=.  The =eval= is used to evaluate it.

- =quote=
- =substitute=
- =eval=
- =call=


** Models
*** Linear model

A linear model is created *and fitted* by =lm()= function, with the model
formula and data frame. For example:

#+BEGIN_SRC R
df = data.frame(x=c(1,2,3), y=c(2,4,6))
fm = lm(y ~ x, data=df)
summary(fm)
#+END_SRC

#+RESULTS:
#+begin_example

Call:
lm(formula = y ~ x, data = df)

Residuals:
1 2 3
0 0 0

Coefficients:
            Estimate Std. Error t value Pr(>|t|)
(Intercept)        0          0      NA       NA
x                  2          0     Inf   <2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 0 on 1 degrees of freedom
Multiple R-squared:      1,	Adjusted R-squared:      1
F-statistic:   Inf on 1 and 1 DF,  p-value: < 2.2e-16

#+end_example

The fitted model in the variable =fm= can be accessed by:
- =coef=: extract the coefficients
- =deviance=: the Residual Sum of Square
- =formula=: extract the model formula
- =plot=: produce four plots: residuals, fitted values, diagnostics.
- =predict(OBJECT, newdata=DATA.FRAME)=: use the model to predict
- =residuals=: extract the residuals
- =summary()=

The models can be updated, if the formula only changes a little bit.  In the
following example, the =.= means the corresponding part of the original formula.

#+BEGIN_SRC R
fs <- lm(y ~ x1 + x2, data=mydf)
fs <- update(fs, . ~ . + x3)
fs <- update(fs, sqrt(.) ~ .)
#+END_SRC

** Plot
Process data:
- table
- cut(data, breaks=c(1,3,8))

*** Decoration
- box
- axis
- las attribute
- legend
- par
- text
- mtext
- points
*** Plot Types
**** plot
- lines
- abline
**** barplot
**** pie
**** boxplot
- quantile
**** hist
- lines(density(data))
**** TODO stem
**** TODO mosaicplot
**** pairs
*** Device Driver
When outputting some image, you have to tell R which format you want
to use. The default on linux is X11, that's why it opens a image
immediately after plotting. To use a device, call the device function,
and after that all graphics output will be sent to that device.
- X11
- pdf
- png
- jpeg

  When you have finished with a device, terminate it by =dev.off()=.

  To output to a file TODO to open plot in emacs:
  #+BEGIN_SRC R
  pdf("test1.pdf")
  dev.control(displaylist = "enable")
  plot(1:10)
  dev.copy(pdf, "test2.pdf")
  dev.off()
  # should now have a valid test2.pdf
  dev.off() # finished
  #+END_SRC

** Packages
*** ggplot2
#+BEGIN_SRC R
qplot(totbill, tip, geom="point", data=tips) # scatter plot
qplot(totbill, tip, geom="point", data=tips) + geom_smooth(method="lm") # with linear relationship line
qplot(tip, geom="histogram", data=tip) # histogram
qplot(tip, geom="histogram", binwidth=1, data=tips) # with custom binwidth
# box plots
qplot(sex, tipperc, geom="boxplot", data=tips)
qplot(smoker, tipperc, geom="boxplot", data=tips)
qplot(sex:smoker, tipperc, geom="boxplot", data=tips) # combine! plot the two sets of graph in two one graph
qplot(totbill, tip, geom="point", colour=day, data=tips) # scatter plot with colors, in regard to "day" column
#+END_SRC
*** plot(x, y, ...)
Possible =...= arguments:
- =type= what type of plot:
  - =p= for points,
  - =l= for lines,
  - =b= for both,
  - =h= for =histogram= like (or =high-density=) vertical lines,
- =main= an overall title for the plot: see =title=.
- =xlab= a title for the x axis: see =title=.
- =ylab= a title for the y axis: see =title=.

*** dplyr
A Grammar of Data Manipulation
- [[https://cran.r-project.org/web/packages/dplyr/index.html][cran page]]

* Julia

** Julia Libraries

*** Optimizers
**** [[https://github.com/JuliaNLSolvers/Optim.jl][Optim.jl]]
optimization

**** [[https://github.com/JuliaOpt/JuMP.jl][JuMP.jl]]
another optimizer with more solvers

*** Datasets
**** [[https://github.com/JuliaLang/METADATA.jl][METADATA.jl]]
Used for [[https://pkg.julialang.org/docs/][official package registry]]

**** [[https://github.com/FluxML/Metalhead.jl][Metalhead.jl]]

Some vision models and dataset

*** Images
**** [[https://github.com/JuliaGraphics/ColorTypes.jl][ColorTypes.jl]]

**** [[https://github.com/JuliaImages/ImageFiltering.jl][ImageFiltering.jl]]

**** [[https://github.com/JuliaImages/Images.jl][Images.jl]]

colorview, channelview, RGB

*** Compiler tools
**** [[https://github.com/MikeInnes/MacroTools.jl][MacroTools.jl]]

**** [[https://github.com/JuliaLang/PackageCompiler.jl][PackageCompiler.jl]]
To remove JIT compile overhead

*** Probablistic packages
**** [[https://github.com/JuliaStats/Distributions.jl][Distributions.jl]]

** Using Pkg

#+BEGIN_SRC julia
using Pkg
Pkg.add(PackageSpec(url="https://github.com/lihebi/julia-repl", rev="master"))
#+END_SRC

To develop a project:

#+BEGIN_SRC julia
Pkg.develop(PackageSpec(url="https://github.com/lihebi/julia-repl"))
#+END_SRC

Then view the current pkg status:

#+BEGIN_SRC julia
Pkg.status()
#+END_SRC

You will see:

#+BEGIN_SRC julia
EmacsREPL v0.1.0 [`~/.julia/dev/EmacsREPL`]
#+END_SRC

* Back

- For vectors, =[]= returns the element.
- For lists, =[]= will return the the element inside a list, while =[[]]= will
  return the single element.
- =$= can be used for indexing with character.
- The empty index =[]= will returns the entire vector with /irrelevant/
  attributes removed. The only retained ones are the =names=, =dim= and
  =dimnames= attributes.


#+begin_src R
dim(z) <- c(3,5,100)~
z[2,,]
z[,,]
#+end_src

*** data example

#+BEGIN_SRC R
## (HEBI: Command line arguments)
args = commandArgs(trailingOnly=TRUE)
csvfile = args[1]
csv = read.csv(csvfile, header=TRUE)

total_test <- dim(csv)[[1]]
sub = subset(csv, reach_code>=5)
total_reach_poi <- dim(sub)[[1]]
sub = subset(csv, reach_code==5 & status_code == 1)
total_fail_poi <- dim(sub)[[1]]

sub <- sub[1:(length(csv)-2)]
## (HEBI: calling a function)
funcs = TransferFunction(sub);

## (HEBI: define a function)
Constant <- function(data) {
  ## (HEBI: return value as a vector)
  ret <- c()
  i <- 1
  ## (HEBI: a for loop using the vector as range)
  for (i in c(1:length(data))) {
    col = data[i];
    ## (HEBI: Get the name of a column)
    name = names(col);
    if (substr(name, 1, 6) == "output") {
      ## (HEBI: remove of NA)
      newcol = col[!is.na(col)];
      if (length(newcol) > 2) {
        value <- newcol[1]
        ## (HEBI: check the value of the vector is all the same)
        if (length(newcol[newcol != value]) == 0) {
          ## (HEBI: pushing a new value to the return vector)
          ret <- c(ret, paste("name = ",  value))}}}}
  return(ret)}

#+END_SRC
